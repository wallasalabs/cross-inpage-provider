{"version":3,"file":"static/chunks/8015bd09.be84c24d769f7f2e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@solana/web3.js/lib/index.browser.esm.js"],"sourcesContent":["import { Buffer } from 'buffer';\nimport { sha512 } from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport * as secp256k1 from '@noble/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.sync.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.Point.fromHex(publicKey, true\n    /* strict */\n    );\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.sync.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\nconst SOLANA_SCHEMA = new Map();\n\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Size of public key in bytes\n */\n\nconst PUBLIC_KEY_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n} // local counter used by PublicKey.unique()\n\n\nlet uniquePublicKeyCounter = 1;\n/**\n * A public key\n */\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using acounter\n   */\n\n\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n\n  /* eslint-disable require-await */\n\n\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n\n}\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._publicKey = void 0;\n    this._secretKey = void 0;\n\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n\n\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n\n    return keySegments;\n  }\n\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n\n    return;\n  }\n\n  get length() {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a signature\n */\n\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl;\n\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\n\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    } // Couldn't determine allocated size of layout\n\n\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n        keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    }; // sanity checks\n\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable); // Don't extract lookup if no keys were found\n\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n  /** @internal */\n\n\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n\n  get version() {\n    return 'legacy';\n  }\n\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n\n  get addressTableLookups() {\n    return [];\n  }\n\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version() {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups() {\n    let count = 0;\n\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n\n    return count;\n  }\n\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = byteArray.shift();\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: byteArray.shift(),\n      numReadonlySignedAccounts: byteArray.shift(),\n      numReadonlyUnsignedAccounts: byteArray.shift()\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK; // if the highest bit of the prefix is not set, the message is not versioned\n\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    } // the lower 7 bits of the prefix indicate the message version\n\n\n    return maskedPrefix;\n  },\n\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n})(TransactionStatus || (TransactionStatus = {}));\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this._message = void 0;\n    this._json = void 0;\n\n    if (!opts) {\n      return;\n    }\n\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions;\n\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      } // Otherwise, sort by pubkey, stringwise.\n\n\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n\n    const instructions = [];\n\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length < // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n\n      this.signatures = defaultSignatures;\n    }\n\n    this.message = message;\n  }\n\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null ? (await connection.confirmTransaction({\n    signature: signature,\n    blockhash: transaction.recentBlockhash,\n    lastValidBlockHeight: transaction.lastValidBlockHeight\n  }, options && options.commitment)).value : (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\nfunction decodeData$1(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\n\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\n\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\nLoader.chunkSize = CHUNK_SIZE;\n\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nvar fastStableStringify = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n\nvar fastStableStringify$1 = fastStableStringify;\n\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n\n} // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\n\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n\n}\n\nvar fetchImpl = globalThis.fetch;\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(), // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n\n  const [_, // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort = // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nvar _process$env$npm_pack;\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n\n  return putativeUrl;\n}\n/** @internal */\n\n\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n\n  return {\n    commitment,\n    config\n  };\n}\n/**\n * @internal\n */\n\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * @internal\n */\n\n\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n    }\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean(),\n      source: optional(union([literal('transaction'), literal('lookupTable')]))\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${(_process$env$npm_pack = \"0.0.0-development\") !== null && _process$env$npm_pack !== void 0 ? _process$env$npm_pack : 'UNKNOWN'}`\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(config) {\n    let configArg = {};\n\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = { ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n\n    return res.result;\n  }\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(rawSignature, (result, context) => {\n          subscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          done = true;\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const expiryPromise = new Promise(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip':\n            {\n              timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n              break;\n            }\n        }\n\n        timeoutId = setTimeout(() => resolve({\n          __type: TransactionStatus.TIMED_OUT,\n          timeoutMs\n        }), timeoutMs);\n      } else {\n        let config = strategy;\n\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n\n          resolve({\n            __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n          });\n        })();\n      }\n    });\n    let result;\n\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(rawSignature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined\n    /* encoding */\n    , { ...config,\n      epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n\n    const args = this._buildArgs([wireMessage], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n\n\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta,\n        version\n      }) => ({\n        meta,\n        transaction: { ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message)\n        },\n        version\n      }))\n    };\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n\n  async getBlockHeight(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgs([], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n    }\n\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n    /* encoding */\n    , config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n      /* encoding */\n      , config);\n\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n\n      const result = res.result;\n      if (!result) return result;\n      return { ...result,\n        transaction: { ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = { ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return { ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n\n    return res.result;\n  }\n\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * get the stake minimum delegation\n   */\n\n\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n\n      return res.result;\n    }\n\n    let transaction;\n\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n\n    const signData = message.serialize();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = { ...subscription,\n        state: 'pending'\n      };\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all( // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n\n            await this._updateSubscriptions();\n            return;\n          }\n\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n\n            try {\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'subscribing'\n              };\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._subscriptionsByHash[hash] = { ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              };\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'pending'\n              };\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._subscriptionsByHash[hash] = { ...subscription,\n                  state: 'unsubscribing'\n                };\n\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  } // TODO: Maybe add an 'errored' state or a retry limit?\n\n\n                  this._subscriptionsByHash[hash] = { ...subscription,\n                    state: 'subscribed'\n                  };\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n\n              this._subscriptionsByHash[hash] = { ...subscription,\n                state: 'unsubscribed'\n              };\n              await this._updateSubscriptions();\n            })();\n          }\n\n          break;\n      }\n    }));\n  }\n  /**\n   * @internal\n   */\n\n\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n\n    if (callbacks === undefined) {\n      return;\n    }\n\n    callbacks.forEach(cb => {\n      try {\n        cb( // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args], true\n    /* isArrayProp */\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = { ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n\n    this._updateSubscriptions();\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64');\n\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized', // Apply connection/server default.\n    'base64'\n    /* encoding */\n    , filters ? {\n      filters: filters\n    } : undefined\n    /* extra */\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = { ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n\n    };\n\n    const args = this._buildArgs([signature], commitment, undefined\n    /* encoding */\n    , extra);\n\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n\n        try {\n          this.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n        } catch (_err) {// Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n\n    return clientSubscriptionId;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n\n    this._handleServerNotification(subscription, [result]);\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, []\n    /* args */\n    );\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n\n    const publicKey = secretKey.slice(32, 64);\n\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n\n}\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n\n    return type;\n  }\n\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\n\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n\n}\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\n\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n// library interoperable with the synchronous APIs in web3.js.\n\nsecp256k1.utils.hmacSha256Sync = (key, ...msgs) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nconst ecdsaSign = (msgHash, privKey) => secp256k1.signSync(msgHash, privKey, {\n  der: false,\n  recovered: true\n});\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false\n      /* isCompressed */\n      ).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\nLockup.default = new Lockup(0, 0, PublicKey.default);\n\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n\n\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insuffcient funds.');\n    }\n\n    return VoteProgram.withdraw(params);\n  }\n\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(), // authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\n\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\n\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n"],"names":["m","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","sign","message","slice","verify","toBuffer","arr","Buffer","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","this","encode","serialize","SOLANA_SCHEMA","static","data","deserialize","deserializeUnchecked","Map","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","value","super","_bn","undefined","isPublicKeyData","decoded","length","Error","key","equals","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","copy","toString","fromPublicKey","seed","programId","publicKeyBytes","seeds","forEach","TypeError","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","default","kind","fields","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","map","instruction","programIdIndex","accountKeyIndexes","keys","meta","pubkey","property","rustString","rsl","_decode","decode","bind","_encode","rslShim","offset","str","chars","alloc","span","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","from","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","call","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","every","pair","serializeMessage","async","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","u64","encodeDecode","bigIntLayout","src","bigInt","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","BigInt","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","Math","ceil","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","allocate","owner","transfer","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify$1","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","code","customMessage","fetchImpl","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","_process$env$npm_pack","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","jsonrpc","id","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","source","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","makeWebsocketUrl","url","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","request","callback","method","body","agent","headers","res","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","e","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","TIMED_OUT","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","rawConfig","_buildArgsAtLeastConfirmed","extra","c","block","endSlot","transactionDetails","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","hash","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","msgs","h","msg","update","digest","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","msgHash","privKey","der","recovered","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","Voter","VoteProgram","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"sourceRoot":""}