{"version":3,"file":"static/chunks/7286.ffac4b1fe03a0f62.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@scure/base/lib/index.js","webpack://_N_E/./node_modules/@scure/bip39/index.js","webpack://_N_E/./node_modules/@scure/bip39/node_modules/@noble/hashes/_assert.js","webpack://_N_E/./node_modules/@scure/bip39/node_modules/@noble/hashes/_sha2.js","webpack://_N_E/./node_modules/@scure/bip39/node_modules/@noble/hashes/_u64.js","webpack://_N_E/./node_modules/@scure/bip39/node_modules/@noble/hashes/cryptoBrowser.js","webpack://_N_E/./node_modules/@scure/bip39/node_modules/@noble/hashes/hmac.js","webpack://_N_E/./node_modules/@scure/bip39/node_modules/@noble/hashes/pbkdf2.js","webpack://_N_E/./node_modules/@scure/bip39/node_modules/@noble/hashes/sha256.js","webpack://_N_E/./node_modules/@scure/bip39/node_modules/@noble/hashes/sha512.js","webpack://_N_E/./node_modules/@scure/bip39/node_modules/@noble/hashes/utils.js"],"sourcesContent":["\"use strict\";\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexports.utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = exports.base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);\nexports.base58check = base58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString;\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mnemonicToSeedSync = exports.mnemonicToSeed = exports.validateMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.generateMnemonic = void 0;\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nconst _assert_1 = require(\"@noble/hashes/_assert\");\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst base_1 = require(\"@scure/base\");\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError(`Invalid mnemonic type: ${typeof str}`);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction assertEntropy(entropy) {\n    _assert_1.default.bytes(entropy, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction generateMnemonic(wordlist, strength = 128) {\n    _assert_1.default.number(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic((0, utils_1.randomBytes)(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([((0, sha256_1.sha256)(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2 ** 11 || typeof wordlist[0] !== 'string')\n        throw new Error('Worlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error(`Wordlist: non-string element: ${i}`);\n    });\n    return base_1.utils.chain(base_1.utils.checksum(1, calcChecksum), base_1.utils.radix2(11, true), base_1.utils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    assertEntropy(entropy);\n    return entropy;\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction entropyToMnemonic(entropy, wordlist) {\n    assertEntropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nconst salt = (passphrase) => nfkd(`mnemonic${passphrase}`);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeed(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2Async)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return (0, pbkdf2_1.pbkdf2)(sha512_1.sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2Async = exports.pbkdf2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    _assert_js_1.default.hash(hash);\n    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    _assert_js_1.default.number(c);\n    _assert_js_1.default.number(dkLen);\n    _assert_js_1.default.number(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = (0, utils_js_1.toBytes)(_password);\n    const salt = (0, utils_js_1.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac_js_1.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2 = pbkdf2;\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, (i) => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2Async = pbkdf2Async;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n"],"names":["assertNumber","n","Number","isSafeInteger","Error","chain","args","wrap","a","b","c","encode","Array","from","reverse","reduce","acc","i","undefined","decode","alphabet","digits","isArray","length","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","Object","defineProperty","exports","value","bytes","stringToBytes","str","bytesToString","hex","utf8","bech32m","bech32","base58check","base58xmr","base58xrp","base58flickr","base58","base64url","base64","base32crockford","base32hex","base32","base16","utils","gcd","radix2carry","convertRadix2","mask","radix","num","Uint8Array","radix2","revPadding","unsafeWrapper","apply","e","checksum","len","set","payload","newChecksum","oldChecksum","s","toUpperCase","replace","genBase58","abc","XMR_BLOCK_LEN","block","subarray","padStart","blockLen","j","concat","sha256","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","TypeError","lowered","toLowerCase","sepIndex","lastIndexOf","sum","endsWith","actualLength","decodeToBytes","decodeUnsafe","TextDecoder","TextEncoder","CODERS","coderTypeError","keys","type","hasOwnProperty","_assert_1","pbkdf2_1","sha256_1","sha512_1","utils_1","base_1","nfkd","norm","includes","assertEntropy","entropy","default","calcChecksum","bitsLeft","getCoder","wordlist","mnemonicToEntropy","mnemonic","entropyToMnemonic","isJapanese","salt","passphrase","pbkdf2","sha512","dkLen","number","bool","lengths","hash","create","outputLen","exists","instance","checkFinished","destroyed","finished","output","out","min","assert","SHA2","_assert_js_1","utils_js_1","Hash","constructor","padOffset","isLE","super","this","buffer","view","createView","update","toBytes","take","process","dataView","roundClean","digestInto","fill","byteOffset","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","get","digest","destroy","_cloneInto","add","toBig","fromBig","U32_MASK64","le","lst","Ah","Uint32Array","Al","Bh","Bl","u64","shrSH","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","crypto","node","web","self","hmac","HMAC","_key","key","iHash","pad","oHash","buf","getPrototypeOf","message","pbkdf2Async","hmac_js_1","pbkdf2Init","_password","_salt","_opts","opts","checkOpts","asyncTick","password","DK","PRF","PRFSalt","pbkdf2Output","prfW","u","arr","ti","Ti","setInt32","ui","async","asyncLoop","_sha2_js_1","Maj","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","wrapConstructor","sha384","sha512_256","SHA512","_u64_js_1","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","randomBytes","wrapConstructorWithOpts","concatBytes","utf8ToBytes","nextTick","hexToBytes","bytesToHex","u32","u8","crypto_1","byteLength","DataView","word","shift","hexes","toString","uint8a","array","hexByte","byte","parseInt","isNaN","iters","tick","cb","ts","Date","now","diff","arrays","every","result","clone","defaults","obj","prototype","call","assign","hashConstructor","hashC","tmp","hashCons","msg","bytesLength","getRandomValues"],"sourceRoot":""}